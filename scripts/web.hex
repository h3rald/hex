"2024" "meta-year" :
"0.2.0" "meta-release" :
"web/assets" "d-assets" :
"web/templates" "d-templates" :
"web/contents" "d-contents" :
"web/out" "d-out" :
"releases" "d-releases" :

; each implementation
(
  "_each_fn" :
  "_each_list" :
   _each_list len "_each_len" :
   0x0 "_each_c" :
   (_each_c _each_len <)
     (
       _each_list _each_c get _each_fn .
       _each_c 0x1 + "_each_c" :
     )
   while
   ;"_each_fn" #
   ;"_each_list" #
   ;"_each_len" # 
   ;"_each_c" #
) "each" ::

; Get all files from a directory
("ls " swap cat run 0x1 get "\n" split) "ls" ::

; Get relevant files
d-contents ls "contents" :
d-assets ls "assets" :
d-releases ls "releases" :
d-templates "/page.html" cat "t-page" :

; Symbols to substitute with the corresponding links 
("split" "run" "get" "puts" ":" "::" "." "#" "==" "'" "swap" "dup"
"+" "*" "-" "each" "cat" "throw" "symbols" "print" "read" "dec" "write" "append" "!" "<=" "if") "symbol-links" :

;; Syntax highlighting

; Delimiters and replacements for syntax highlighting
(
    "$;" 
    "$#|" 
    "|#$" 
    "$\"" 
    "$0x" 
    "$:" 
    "$$"
    "%:"
    "%%"
) "highlight-delimiters" :

(
    "<span class=\"hex-comment\">;" 
    "<span class=\"hex-comment\">#|" 
    "|#</span>" 
    "<span class=\"hex-string\">\""
    "<span class=\"hex-integer\">0x"
    "<span class=\"hex-symbol\">"
    "</span>"
    "<code>"
    "</code"
) "highlight-replacements" :

; Highlight syntax in text
(
    "t-text" :
    0x0 "t-count" :
    (t-count highlight-delimiters len <)
        (
            t-text highlight-delimiters t-count get "t-delimiter" :
            t-text highlight-replacements t-count get "t-replacement" :
            ; Find delimiter in text and replace it with the corresponding replacement
            (t-text t-delimiter index 0x0 >=)
                (
                    t-text t-delimiter t-replacement replace "t-text" :
                ) 
            while
            t-count 0x1 + "t-count" :
        )
    while
    ; Push highlighted text on the stack
    t-text
    ; Free temporary symbols
    "t-text" #
    "t-count" #
    "t-delimiter" #
    "t-replacement" #
) "highlight" ::

; Convenience symbol for debugging
(dup puts) "_" ::

; Generate tag placeholder
(
    "{{" swap "}}" cat cat
) "tag" ::

; Replace tag
(
    "pt-repl" :
    "pt-tag" :
    "pt-content" :
    (pt-content pt-tag tag index 0x0 >)
        (pt-content pt-tag tag pt-repl replace "pt-content" :)
    while 
    pt-content
    "pt-repl"    #
    "pt-tag"     #
    "pt-content" #
) "process-tag" ::


; Replace symbol placeholder with link to spec
(
    "t-symbol" :
    "t-content" :
    t-symbol "t-href" :
    ; Handle "special" symbols
    (t-symbol ":" ==)("store" "t-href" :) when
    (t-symbol "<=" ==)("lessthanequal" "t-href" :) when
    (t-symbol "." ==)("i" "t-href" :) when
    (t-symbol "." ==)("i" "t-href" :) when
    (t-symbol "#" ==)("free" "t-href" :) when
    (t-symbol "!" ==)("eval" "t-href" :) when
    (t-symbol "'" ==)("quote" "t-href" :) when
    (t-symbol "+" ==)("add" "t-href" :) when
    (t-symbol "::" ==)("operator" "t-href" :) when
    (t-symbol "*" ==)("multiply" "t-href" :) when
    (t-symbol "-" ==)("subtract" "t-href" :) when
    ("<a href=\"https://hex.2c.fyi/spec#" t-href "-symbol\">" t-symbol "</a>") () map "" join "t-repl" :
    ; Push replacement content on the stack
    t-content 
    "sym-" t-symbol cat 
    t-repl 
    process-tag
    ; Free temporary symbols
    "t-repl" #
    "t-symtag" #
    "t-href" #
    "t-symbol" #
) "process-symbol" ::

; Load releases content for changelog
"" "releases-content" :
(
    releases len "_releases_count" :
    ; Reverse releases order
    (_releases_count 0x0 <)
        (
            releases _releases_count get "id-release" :
            ; Update releases-content
            d-releases "/" id-release cat cat read releases-content swap cat "releases-content" : 
            _count 0x1 - "_releases_count" :
        )
    while
    "_releases_count"        #
    "id-release"    #
) "process-releases" ::

; Create changelog toc
(
    "" "changelog-toc" : ;external
    releases len "_gct_count" :
    ; Reverse releases order
    (_gct_count 0x0 <)
        (
            releases _gct_count get ".html" "" replace "id-release" :
            changelog-toc
            ("<li><a href=\"#v" id-release "\">v" id-release "</a></li>\n") () map "" join 
            cat
            "changelog-toc" :
            _gct_count 0x1 - "_gct_count" :
        )
    while
    "<ul>\n"
    changelog-toc
    "</ul>\n" 
    cat cat
    "changelog-toc" : 
    "_gct_count"        #
    "id-release"    #

) "generate-changelog-toc" ::

generate-changelog-toc

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;; Generate CHANGELOG
"*** Updating CHANGELOG.md..." puts
process-releases

; Read changelog template and add generated release content
d-contents "/" "changelog.html" cat cat read
"changelog-toc" changelog-toc process-tag
"releases" releases-content process-tag
"changelog-content" :
symbol-links (changelog-content swap process-symbol "changelog-content" :) each

; Write CHANGELOG.md
changelog-content
"CHANGELOG.md" write
"*** Done!" puts

;;;;; Write web site contents
"*** Generating hex web site..." puts
contents
(
    "fn-content" :
    fn-content ".html" "" replace "id-content" :
    d-contents "/" fn-content cat cat read "content" :
    t-page read
    ; Replace tags
    "content" content process-tag
    "title" id-content process-tag
    "release" meta-release process-tag
    "year" meta-year process-tag
    "changelog-toc" changelog-toc process-tag
    "releases" releases-content process-tag
    "new-content" :
    ; Replace symbols with links
    symbol-links (new-content swap process-symbol "new-content" :) each
    ; Highlight syntax
    new-content highlight "new-content" :
    (fn-content "home.html" ==)
        (
            ; Process home page
            d-out "/index.html" cat "dst-file" :
        ) 
        (
            (d-out id-content "index.html") () map "/" join "dst-file" :
        )
    if
    "  - Writing: " dst-file cat puts
    new-content dst-file write
) each


; Write assets
("sh -c \"mkdir -p " d-out "/assets\"") () map ""  join exec
assets
(
    "fn-asset" :
    (d-out "assets" fn-asset) () map "/" join "dst-file" :
    (fn-asset "robots.txt" ==)
        ((d-out fn-asset) () map "/" join "dst-file" :)
    when
    (d-assets fn-asset) () map "/" join "src-file" :
    "  - Writing: " dst-file cat puts
    ("cp" src-file dst-file) () map " " join exec  
) each

"*** Done!" puts

